const { PREFIX } = require(`${BASE_DIR}/config`);
const { DangerError } = require(`${BASE_DIR}/errors`);
const { evaluate } = require("mathjs");

module.exports = {
  name: "calculadora",
  description: "Faz c√°lculos matem√°ticos, incluindo fun√ß√µes cient√≠ficas.",
  commands: ["calculadora", "calc", "calcular", "math", "scientific"],
  usage: `${PREFIX}calculadora 2 + 2; sin(pi/2)`,

  handle: async ({ args, sendReply }) => {
    if (!args.length) {
      throw new DangerError(
        `Voc√™ precisa informar uma express√£o matem√°tica.\n\nExemplo: ${PREFIX}calculadora 2 + 2\nOperadores: + - * / ^ ( )`
      );
    }

    const rawExpression = args.join(" ");

    try {
      // Separar m√∫ltiplas express√µes com ";"
      const expressions = rawExpression
        .split(";")
        .map(e => e.trim())
        .filter(e => e);

      if (!expressions.length) {
        throw new DangerError("Nenhuma express√£o matem√°tica encontrada.");
      }

      let reply = `üßÆ *CALCULADORA AVAN√áADA*\n\n`;

      for (let expr of expressions) {
        // Limpar caracteres inv√°lidos
        const safeExpr = expr.replace(/[^0-9+\-*/^()., eEpiabsqrtlogsinctanexp]/gi, "");

        let result;
        try {
          result = evaluate(safeExpr);
        } catch {
          reply += `‚ö†Ô∏è Express√£o inv√°lida: ${expr}\n\n`;
          continue;
        }

        if (typeof result === "number" && isFinite(result)) {
          reply += `üî∏ *Express√£o:* ${expr}\n`;
          reply += `üîπ *Resultado:* ${result}\n\n`;
        } else {
          reply += `‚ö†Ô∏è Resultado indefinido: ${expr}\n\n`;
        }
      }

      reply += `_C√°lculos finalizados_`;
      await sendReply(reply);

    } catch {
      throw new DangerError(
        "Erro ao calcular. Use apenas n√∫meros, operadores + - * / ^, fun√ß√µes (sin, cos, tan, sqrt, log, abs, exp) e constantes (pi, e)."
      );
    }
  },
};
